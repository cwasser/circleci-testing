version: 2

templates:
  make-v4-for-machine-executor:
    restore_cache: &make-v4-for-machine-executor-restore_cache
      keys:
        - v1-make4
    run: &make-v4-for-machine-executor-compile
      name: Install make v4
      command: |
        set +o pipefail
        MAKE_MAJOR_VERSION=$(make -v | grep -Eo "Make\s\d\.\d.\d" | cut -d " " -f2 | cut -d. -f1 )
        if [ "$MAKE_MAJOR_VERSION" -lt "4" ]; then
          cd /tmp
          wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
          tar xvf make-4.1.tar.gz
          cd make-4.1/
          ./configure
          make
          sudo make install
          rm -rf make-4.1.tar.gz make-4.1
        fi;
    save_cache: &make-v4-for-machine-save_cache
      key: v1-make4
      paths:
        - /usr/local/bin/make

workflows:
  version: 2

#  web-server-pipeline:
#    jobs:
# >> build web-server base image "snapshot" (without copying source-code)
#
#  web-service-pipeline:
#    jobs:
# >> build web-service base image "snapshot" (without copying source-code)
# >> run unit-tests
#
#  web-testing-pipeline:
#    jobs:
# >>
#
#  promote-snapshot-artifacts:
#    jobs:

  Pipeline:
    jobs:
      - Checkout
      - Generate docker files:
          filters: {branches: {only: [master]}}
          requires: ["Checkout"]

      - Build web-server dev image:
          requires: ["Generate docker files"]
      - Build web-service dev image:
          requires: ["Generate docker files"]
      - Run web-service unit tests:
          requires: ["Build web-service dev image"]

      - Build web-server prod image:
          requires: ["Generate docker files", "Build web-service dev image"]
      - Build web-service prod image:
          requires: ["Generate docker files", "Run web-service unit tests"]


      - Run web-testing tests:
          requires: ["Build web-server prod image", "Build web-server prod image"]

#      - run contract tests
#      - run end-to-end tests

#      - Bundle web-server prod image with source-code:
#      - Bundle web-service prod image with source-code:
#      - Push web-server prod image:
#          filters: {branches: {only: [master]}}
#          requires: ["Build web-server prod image", "Run tests"]
#      - Push web-service prod image:
#          filters: {branches: {only: [master]}}
#          requires: ["Build web-service prod image", "Run tests"]

#      - deploy

jobs:
  Checkout:
    docker: [{image: fleshgrinder/alpine-git-tar}]
    working_directory: ~/src
    steps:
      - checkout
      - persist_to_workspace: {root: ~/src, paths: [.]}

  Generate docker files:
    docker: [{image: "php:cli"}]
    working_directory: ~/src
    steps:
      - attach_workspace: {at: ~/src}
      - run:
          name: Generate web-server Docker files
          command: php web-server/bin/gen-dockerfiles
      - run:
          name: Generate web-service Docker files
          command: php web-service/bin/gen-dockerfiles
      - persist_to_workspace:
          root: ~/src
          paths:
            - web-server/Dockerfile.web-server-dev
            - web-server/Dockerfile.web-server-prod
            - web-service/Dockerfile.web-service-dev
            - web-service/Dockerfile.web-service-prod

  Build web-server dev image:
    docker: [{image: fleshgrinder/docker-buildpack}]
    working_directory: ~/src/web-server
    steps:
      - attach_workspace: {at: ~/src}
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-web-server-dev-{{ checksum "Dockerfile.web-server-dev" }}
            - v1-web-server-dev
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /cache/docker/web-server-dev.tar | true
            docker images
      - run:
          name: Build image
          command: |
            COMMIT_RANGE=$(echo "${CIRCLE_COMPARE_URL}" | sed 's:^.*/compare/::g')
            if git diff "${COMMIT_RANGE}" --name-status | grep "web-server/resources/docker/Dockerfile.template"
              then make dev-image
              else touch /skip
            fi
      - run:
          name: Export image
          command: |
            if [ -f /skip ]
            then
              echo skipping
            else
              mkdir -p /cache/docker
              docker save -o /cache/docker/web-server-dev.tar fleshgrinder/web-server-dev
            fi
      - save_cache:
          key: v1-web-server-dev-{{ checksum "Dockerfile.web-server-dev" }}
          paths: [/cache/docker/web-server-dev.tar]
      - run:
          name: Push image
          command: |
            if [ -f /skip ]
            then
              echo skipping
            else
              docker login -u fleshgrinder -p "${DOCKER_PASS}"
              docker push fleshgrinder/web-server-dev:latest
            fi

  Build web-service dev image:
    docker: [{image: fleshgrinder/docker-buildpack}]
    working_directory: ~/src/web-service
    steps:
      - attach_workspace: {at: ~/src}
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-web-service-dev-{{ checksum "Dockerfile.web-service-dev" }}
            - v1-web-service-dev
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /cache/docker/web-service-dev.tar | true
            docker images
      - run:
          name: Build image
          command: |
            COMMIT_RANGE=$(echo "${CIRCLE_COMPARE_URL}" | sed 's:^.*/compare/::g')
            if git diff "${COMMIT_RANGE}" --name-status | grep "web-service/resources/docker/Dockerfile.template"
              then make dev-image
              else touch /skip
            fi
      - run:
          name: Export image
          command: |
            if [ -f /skip ]
            then
              echo skipping
            else
              mkdir -p /cache/docker
              docker save -o /cache/docker/web-service-dev.tar fleshgrinder/web-service-dev
            fi
      - save_cache:
          key: v1-web-service-dev-{{ checksum "Dockerfile.web-service-dev" }}
          paths: [/cache/docker/web-service-dev.tar]
      - run:
          name: Push image
          command: |
            if [ -f /skip ]
            then
              echo skipping
            else
              docker login -u fleshgrinder -p "${DOCKER_PASS}"
              docker push fleshgrinder/web-service-dev:latest
            fi

  Build web-server prod image:
    docker: [{image: fleshgrinder/docker-buildpack}]
    working_directory: ~/src/web-server
    steps:
      - attach_workspace: {at: ~/src}
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-web-server-prod{{ checksum "Dockerfile.web-server-prod" }}
            - v1-web-server-prod
          paths: [/cache/docker/web-server-prod.tar]
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /cache/docker/web-server-prod.tar | true
            docker images
      - run:
          name: Build image
          command: make prod-image
      - run:
          name: Export image
          command: |
            mkdir -p /cache/docker
            docker save -o /cache/docker/web-server-prod.tar fleshgrinder/web-server-prod
      - save_cache:
          key: v1-web-server-prod-{{ checksum "Dockerfile.web-server-prod" }}
          paths: [/cache/docker/web-server-prod.tar]

  Build web-service prod image:
    docker: [{image: fleshgrinder/docker-buildpack}]
    working_directory: ~/src/web-service
    steps:
      - attach_workspace: {at: ~/src}
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-web-service-prod{{ checksum "Dockerfile.web-service-prod" }}
            - v1-web-service-prod
          paths: [/cache/docker/web-service-prod.tar]
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /cache/docker/web-service-prod.tar | true
            docker images
      - run:
          name: Build image
          command: make prod-image
      - run:
          name: Export image
          command: |
            mkdir -p /cache/docker
            docker save -o /cache/docker/web-service-prod.tar fleshgrinder/web-service-prod
      - save_cache:
          key: v1-web-service-prod-{{ checksum "Dockerfile.web-service-prod" }}
          paths: [/cache/docker/web-service-prod.tar]

  Run web-service unit tests:
    machine:
      enabled: true
      image: circleci/classic:edge
    working_directory: ~/src/web-service
    steps:
      - attach_workspace: {at: ~/src}
      - <<: *make-v4-for-machine-executor-restore_cache
      - <<: *make-v4-for-machine-executor-compile
      - <<: *make-v4-for-machine-save_cache
      - restore_cache:
          keys:
            - v1-web-service-composer-{{ checksum "composer.lock" }}
            - v1-web-service-composer
          keys:
            - v1-web-service-dev-{{ checksum "web-service/Dockerfile.web-service-dev" }}
            - v1-web-service-dev
      - run:
          name: Load generated docker images from cache
          command: |
            set +o pipefail
            test -f load -i /cache/docker/web-service-prod.tar \
              && docker load -i /cache/docker/web-service-prod.tar
            docker images
      - run:
          name: Execute unit tests
          command: make test
      - save_cache:
          key: v1-web-service-composer-{{ checksum "composer.lock" }}
          paths:
            - ~/.composer
            - ~/src/web-service/vendor
      - store_artifacts: {path: code-coverage}


  Run web-testing tests:
    machine:
      enabled: true
      image: circleci/classic:edge
    working_directory: ~/src/web-testing
    steps:
      - attach_workspace: {at: ~/src}
      - <<: *make-v4-for-machine-executor-restore_cache
      - <<: *make-v4-for-machine-executor-compile
      - <<: *make-v4-for-machine-save_cache
      - restore_cache:
          keys:
            - v1-web-service-dev-{{ checksum "web-service/Dockerfile.web-service-dev" }}
            - v1-web-service-dev
      - restore_cache:
          keys:
            - v1-web-server-prod-{{ checksum "web-server/Dockerfile.web-server-prod" }}
            - v1-web-server-prod
      - restore_cache:
          keys:
            - v1-web-service-prod-{{ checksum "web-server/Dockerfile.web-service-prod" }}
            - v1-web-service-prod
      - run:
          name: Load generated docker images from cache
          command: |
            set +o pipefail
            test -f /cache/docker/web-server-dev.tar \
              && docker load -i /cache/docker/web-server-dev.tar
            test -f load -i /cache/docker/web-server-prod.tar \
              && docker load -i /cache/docker/web-server-prod.tar
            test -f load -i /cache/docker/web-service-prod.tar \
              && docker load -i /cache/docker/web-service-prod.tar
            docker images
      - run:
          name: Execute tests
          command: |
            set +e
            /usr/local/bin/make prod-test

#  Run web-testing tests:
#    machine:
#      enabled: true
#      image: circleci/classic:edge
#    working_directory: ~/src/web-testing
#    steps:
#      - attach_workspace: {at: ~/src}
#      - restore_cache:
#          keys:
#            - v1-web-service-dev-{{ checksum "web-service/Dockerfile.web-service-dev" }}
#            - v1-web-service-dev
#      - restore_cache:
#          keys:
#            - v1-web-server-prod-{{ checksum "web-server/Dockerfile.web-server-prod" }}
#            - v1-web-server-prod
#      - restore_cache:
#          keys:
#            - v1-web-service-prod-{{ checksum "web-server/Dockerfile.web-service-prod" }}
#            - v1-web-service-prod
#      - run:
#          name: Load generated docker images from cache
#          command: |
#            set +o pipefail
#            test -f /cache/docker/web-server-dev.tar \
#              && docker load -i /cache/docker/web-server-dev.tar
#            test -f load -i /cache/docker/web-server-prod.tar \
#              && docker load -i /cache/docker/web-server-prod.tar
#            test -f load -i /cache/docker/web-service-prod.tar \
#              && docker load -i /cache/docker/web-service-prod.tar
#            docker images
#      - run:
#          name: Install make v4
#          command: |
#            set +o pipefail
#            cd /tmp
#            wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
#            tar xvf make-4.1.tar.gz
#            cd make-4.1/
#            ./configure
#            make
#            sudo make install
#            rm -rf make-4.1.tar.gz make-4.1
#      - run:
#          name: Execute tests
#          command: |
#            set +e
#            /usr/local/bin/make test

  Push web-server prod image:
    docker: [{image: fleshgrinder/docker-buildpack}]
    working_directory: ~/src/web-server
    steps:
      - attach_workspace: {at: ~/src}
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-web-server-prod{{ checksum "Dockerfile.web-server-dev-prod" }}
            - v1-web-server-prod
          paths: [/cache/docker/web-server-prod.tar]
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /cache/docker/web-server-prod.tar | true
            docker images
      - run:
          name: Push image
          command: |
            if [ "${CIRCLE_BRANCH}" = master ]; then
              docker login -u fleshgrinder -p "${DOCKER_PASS}"
              docker push fleshgrinder/web-server-prod:latest
            fi

  Push web-service prod image:
    docker: [{image: fleshgrinder/docker-buildpack}]
    working_directory: ~/src/web-service
    steps:
      - attach_workspace: {at: ~/src}
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-web-service-prod{{ checksum "Dockerfile.web-service-prod" }}
            - v1-web-service-prod
          paths: [/cache/docker/web-service-prod.tar]
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /cache/docker/web-service-prod.tar | true
            docker images
      - run:
          name: Push image
          command: |
            if [ "${CIRCLE_BRANCH}" = master ]; then
              docker login -u fleshgrinder -p "${DOCKER_PASS}"
              docker push fleshgrinder/web-service-prod:latest
            fi
