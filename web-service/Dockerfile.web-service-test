# We use a standard Ubuntu installation for testing of our code. Most people
# are familiar with Ubuntu and it has the best PHP packages where almost all
# modules are readily available.

FROM ubuntu:xenial

WORKDIR /src

ENV DEBIAN_FRONTEND="teletype" LANG="C.UTF-8" \
	COMPOSER_ALLOW_SUPERUSER=1 \
	COMPOSER_DISCARD_CHANGES=1 \
	COMPOSER_NO_INTERACTION=1

RUN set -exu;\
#
# ------------------------------------------------------------------------------ Config
#
# The desired PHP version to install (`major.minor` no patch)
readonly PHP_VERSION=7.1;\
#
# Versioned PHP extension (e.g. php7.0-cli)
readonly PHP_EXTENSIONS='cli dom mbstring phpdbg xml zip';\
#
# Extensions that must be installed via PECL
#
# Both the `grpc` and `protobuf` extensions could be conveniently installed via
# PECL. The problem is that they have several problems that were revealed while
# trying to compile them from source with added security. Please refer to
# `./Dockerfile.web-service` for more info.
readonly PECL_EXTENSIONS='';\
#
# Dependencies that should be part of the final image
readonly DEPS='git zlib1g-dev';\
#
# Dependencies that are required for building but not part of the final image
readonly BUILD_DEPS="build-essential php${PHP_VERSION}-dev php-pear";\
#
# ------------------------------------------------------------------------------
#
info() { printf '\n\033[33m%s\033[0m\n\n' "$1"; };\
apt_update() { apt-get update -qq; };\
apt_install() { apt-get install -qqy --auto-remove --no-install-recommends --no-install-suggests $*; };\
#
mkdir -p /etc/dpkg/dpkg.conf.d;\
touch /etc/dpkg/dpkg.conf.d/01_nodoc;\
for e in 'doc-base doc groff info linda lintian man';\
	do echo "path-exclude /usr/share/${e}/*" >> /etc/dpkg/dpkg.conf.d/01_nodoc;\
done;\
#
info 'adding ondrej PHP PPA';\
apt_update;\
apt_install software-properties-common;\
add-apt-repository ppa:ondrej/php;\
apt_update;\
#
info 'installing PHP and PHP extensions';\
es=;\
for e in ${PHP_EXTENSIONS}; do\
	es="${es} php${PHP_VERSION}-${e}";\
done;\
apt_install ${BUILD_DEPS} ${DEPS} ${es};\
unset e es;\
#
if [ "${PECL_EXTENSIONS}" != '' ]; then\
	info 'installing PECL extensions';\
	for e in ${PECL_EXTENSIONS}; do\
		pecl install ${e};\
		echo "extension = ${e}.so" > /etc/php/${PHP_VERSION}/mods-available/${e}.ini;\
		ln -s /etc/php/${PHP_VERSION}/mods-available/${e}.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-${e}.ini;\
	done;\
	unset e;\
fi;\
#
info 'installing composer';\
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');";\
php -r "if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;";\
php composer-setup.php --filename=composer --install-dir=/usr/local/bin;\
#
info 'cleanup';\
apt-get purge -qqy --auto-remove ${BUILD_DEPS} software-properties-common;\
apt-get clean -qqy;\
rm -rf \
/etc/dpkg/dpkg.conf.d/ \
/tmp/* \
/usr/local/src/* \
/usr/share/doc-base/ \
/usr/share/doc/ \
/usr/share/groff/ \
/usr/share/info/ \
/usr/share/linda/ \
/usr/share/lintian/ \
/usr/share/man/ \
/var/lib/apt/lists/* \
/var/tmp/*
